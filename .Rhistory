head(datos$Age, n = 10) # Muestra las primeras 10 filas
setwd("F:/alura/Rstudio/Bioestadistica/Acel")
library(readr)
library(knitr)
datos <- read_tsv("heart_attack_youth_vs_adult_pakistan.csv")
head(datos$Age, n = 10) # Muestra las primeras 10 filas
head(datos$Age, n = 10) # Muestra las primeras 10 filas
head(datos$Gender) # Muestra las primeras 10 filas
kable(datos, 10)
View(datos)
datos <- read_tsv("Obesity prediction.csv")
head(datos)
View(datos)
datos <- read_csv("Obesity prediction.csv")
head(datos)
tail(datos)
kable(datos, 10)
tail(datos)
datos <- read_csv("Age Prediction.csv")
head(datos)
tail(datos)
kable(datos, 10)
tail(datos)
datos <- read_csv("Cleaned-Data.csv")
head(datos)
datos <- read_csv("rows-genes.csv")
head(datos)
datos <- read_csv("Obesity prediction.csv")
head(datos)
head(datos$Age) # Muestra las primeras 10 filas
head(datos)
head(datos$SMOKE) # Muestra las primeras 10 filas
Age
kable(datos)
head(datos)
tail(datos)
kable(datos)
library(readr)
datos <- read_csv("Obesity prediction.csv")
head(datos)
tail(datos)
head(datos)
tail(datos)
head(datos)
library(ggplot2)
library(ggpubr)
#graficando la población
ggplot(datos, aes(x = Age)) +
geom_density(fill = "lightblue", alpha = 0.5) +  # Gráfico de densidad
labs(title = "Distribución de Edades", x = "Edad", y = "Densidad") +
theme_pubclean()
ggplot(datos, aes(y = Age)) +
geom_violin(fill = "lightblue") +
labs(title = "Violin plot de Edades", y = "Edad")
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Edades", x = "Edad", y = "Frecuencia")
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Edades", x = "Edad", y = "Frecuencia")
knitr::opts_chunk$set(echo = TRUE)
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(aes(xintercept = mean(Age)), color = "red", linetype = 2) +
facet_wrap(~ grupo) +  # Suponiendo que tienes una columna "grupo"
labs(title = "Distribución de Edades por Grupo", x = "Edad", y = "Frecuencia")
#graficando la población
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Edades", x = "Edad", y = "Frecuencia")
ggplot(datos, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "black") +
labs(title = "Distribución de Pesos", x = "Peso", y = "Frecuencia") +
theme_pubclean()
ggplot(datos, aes(x = Weight)) +
geom_histogram(binwidth = 10, fill = "#69b3a2", color = "black") +
geom_vline(aes(xintercept = mean(Weight)), color = "red", linetype = 2) +
labs(title = "Distribución de Pesos", x = "Peso (kg)", y = "Número de observaciones") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(datos, aes(x = Weight)) +
geom_histogram(binwidth = 10, fill = "#69b3a2", color = "black") +
geom_vline(aes(xintercept = mean(Weight)), color = "red", linetype = 2) +
labs(title = "Distribución de Pesos", x = "Peso (kg)", y = "Número de observaciones") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#graficando la población
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Edades", x = "Edad", y = "Frecuencia")
#graficando la población
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(aes(xintercept = mean(Age)), color = "red", linetype = 2) +
labs(title = "Histograma de Edades", x = "Edad", y = "Frecuencia")
ggplot(datos, aes(x = Weight)) +
geom_histogram(binwidth = 10, fill = "#69b3a2", color = "black") +
geom_vline(aes(xintercept = mean(Weight)), color = "red", linetype = 2) +
labs(title = "Distribución de Pesos", x = "Peso (kg)", y = "Número de observaciones") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#librerias
library(readr)
library(ggplot2)
library(ggpubr)
library(knitr)
library(kableExtra)
# Calculando las estadísticas descriptivas
estadisticas <- data.frame(
Variable = c("Edad", "Peso"),
Media = c(mean(datos$Age), mean(datos$Weight)),
Desviacion_Estandar = c(sd(datos$Age), sd(datos$Weight))
)
# Creando la tabla
kable(estadisticas, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Calculando las estadísticas descriptivas
estadisticas_pob <- data.frame(
Variable = c("Edad", "Peso"),
Media = round(c(mean(datos$Age), mean(datos$Weight)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight)), 2),
Minimo = c(min(datos$Age), min(datos$Weight)),
Maximo = c(max(datos$Age), max(datos$Weight)),
Q1 = round(quantile(datos$Age, 0.25), 2),
Q3 = round(quantile(datos$Age, 0.75), 2),
.groups = "drop"
)
# Creando la tabla
kable(estadisticas_pob, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
column_spec(2:ncol(estadisticas_pob), format = "S", bold = T)
# Calculando las estadísticas descriptivas
estadisticas_pob <- data.frame(
Variable = c("Edad", "Peso"),
Media = round(c(mean(datos$Age), mean(datos$Weight)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight)), 2),
Minimo = c(min(datos$Age), min(datos$Weight)),
Maximo = c(max(datos$Age), max(datos$Weight)),
Q1 = round(quantile(datos$Age, 0.25), 2),
Q3 = round(quantile(datos$Age, 0.75), 2),
.groups = "drop"
)
# Creando la tabla
kable(estadisticas_pob, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
column_spec(2:ncol(estadisticas_pob), format = "S", bold = T)
# Calculando las estadísticas descriptivas
estadisticas <- data.frame(
Variable = c("Edad", "Peso"),
Media = round(c(mean(datos$Age), mean(datos$Weight)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight)), 2),
Minimo = c(min(datos$Age), min(datos$Weight)),
Maximo = c(max(datos$Age), max(datos$Weight)),
)
Variable = c("Edad", "Peso"),
# Calculando las estadísticas descriptivas
estadisticas <- data.frame(
Variable = c("Edad", "Peso"),
Media = c(mean(datos$Age), mean(datos$Weight)),
Desviacion_Estandar = c(sd(datos$Age), sd(datos$Weight))
)
# Calculando las estadísticas descriptivas
estadisticas <- data.frame(
Variable = c("Edad", "Peso"),
Media = round(c(mean(datos$Age), mean(datos$Weight)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight)), 2),
Minimo = c(min(datos$Age), min(datos$Weight)),
Maximo = c(max(datos$Age), max(datos$Weight)),
)
# Calculando las estadísticas descriptivas
estadisticas_pob <- data.frame(
Variable = c("Edad", "Peso"),
Media = round(c(mean(datos$Age), mean(datos$Weight)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight)), 2),
Minimo = c(min(datos$Age), min(datos$Weight)),
Maximo = c(max(datos$Age), max(datos$Weight)),
Q1 = round(quantile(datos$Age, 0.25), 2),
Q3 = round(quantile(datos$Age, 0.75), 2),
.groups = "drop"
)
# Creando la tabla
kable(estadisticas, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Creando la tabla
kable(estadisticas_pob, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Calculando las estadísticas descriptivas
estadisticas_pob <- data.frame(
Variable = c("Edad", "Peso"),
Media = round(c(mean(datos$Age), mean(datos$Weight)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight)), 2),
Minimo = c(min(datos$Age), min(datos$Weight)),
Maximo = c(max(datos$Age), max(datos$Weight))
)
# Creando la tabla
kable(estadisticas_pob, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Calculando las estadísticas descriptivas
estadisticas_pob <- data.frame(
Variable = c("Edad", "Peso", "Altura"),  # Agregamos "Altura"
Media = round(c(mean(datos$Age), mean(datos$Weight), mean(datos$Height)), 2),
Mediana = round(c(median(datos$Age), median(datos$Weight), median(datos$Height)), 2),
Moda = c(names(which.max(table(datos$Age))), names(which.max(table(datos$Weight))), names(which.max(table(datos$Height)))),
Desviacion_Estandar = round(c(sd(datos$Age), sd(datos$Weight), sd(datos$Height)), 2),
Minimo = c(min(datos$Age), min(datos$Weight), min(datos$Height)),
Maximo = c(max(datos$Age), max(datos$Weight), max(datos$Height))
)
# Creando la tabla
kable(estadisticas_pob, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Datos en tabla
kable(estadisticas_pob, caption = "Estadísticas Descriptivas") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
glimpse(datos)
#Muestreo
sample_size <- 800
sample(1:nrow(datos), size = sample_size, replace = FALSE)
sample
muestra(1:nrow(datos), size = sample_size, replace = FALSE)
sample(1:nrow(datos), size = sample_size, replace = FALSE)
head(sample)
head(sample)
muestra <- sample(1:nrow(datos), size = sample_size, replace = FALSE)
head(muestra)
head(muestra)
muestra <- sample(1:nrow(datos), size = sample_size, replace = TRUE)
head(muestra)
sample_data <- datos[sample_indices, ]
# Muestreo aleatorio simple sin reemplazo
sample_size <- 100  # Ajusta el tamaño de la muestra según tus necesidades
sample_indices <- sample(1:nrow(datos), size = sample_size, replace = FALSE)
sample_data <- datos[sample_indices, ]
# Mostrar las primeras filas de la muestra
head(sample_data)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#librerias
library(readr)
library(ggplot2)
library(ggpubr)
library(knitr)
library(kableExtra)
sample_data <- datos %>%
group_by(Gender) %>%
sample_frac(size = 0.2) %>%  # Muestra el 20% de cada grupo
ungroup()
# Mostrar las primeras filas de la muestra
head(sample_data)
# Mostrar las primeras filas de la muestra
head(sample_data)
sample_data <- datos %>%
group_by(Gender) %>%
sample_frac(size = 0.2) %>%  # Muestra el 20% de cada grupo
ungroup()
# Mostrar las primeras filas de la muestra
head(sample_data)
# Función para generar una muestra bootstrap
bootstrap_sample <- function(data, size) {
sample_indices <- sample(1:nrow(data), size = size, replace = TRUE)
return(data[sample_indices, ])
}
# Generar 100 muestras bootstrap
num_samples <- 100
ggplot(sample_data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Edades en la Muestra", x = "Edad", y = "Frecuencia")
ggplot(sample_data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(aes(xintercept = mean(Age)), color = "red", linetype = 2) +
labs(title = "Histograma de Edades en la Muestra", x = "Edad", y = "Frecuencia")
ggplot(sample_data, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(aes(xintercept = mean(Age)), color = "red", linetype = 2) +
labs(title = "Histograma de Edades en la Muestra", x = "Edad", y = "Frecuencia")
ggplot(sample_data, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(aes(xintercept = mean(Weight)), color = "red", linetype = 2) +
labs(title = "Histograma de Edades en la Muestra", x = "Edad", y = "Frecuencia")
# Parámetros del muestreo bootstrap
numero_de_muestras <- 100
# Función para generar una muestra bootstrap
generar_muestra_bootstrap <- function(datos, tamano_muestra) {
indices <- sample(1:nrow(datos), size = tamano_muestra, replace = TRUE)
muestra <- datos[indices, ]
return(muestra)
}
# Crear una lista para almacenar las muestras bootstrap
muestras_bootstrap <- list()
# Generar las muestras bootstrap
for (i in 1:numero_de_muestras) {
muestras_bootstrap[[i]] <- generar_muestra_bootstrap(datos, tamano_muestra)
}
# Parámetros del muestreo bootstrap
numero_de_muestras <- 100
tamano_muestra <- 100  # Ajusta el tamaño de la muestra según tus necesidades
# Función para generar una muestra bootstrap
generar_muestra_bootstrap <- function(datos, tamano_muestra) {
indices <- sample(1:nrow(datos), size = tamano_muestra, replace = TRUE)
muestra <- datos[indices, ]
return(muestra)
}
# Crear una lista para almacenar las muestras bootstrap
muestras_bootstrap <- list()
# Generar las muestras bootstrap
for (i in 1:numero_de_muestras) {
muestras_bootstrap[[i]] <- generar_muestra_bootstrap(datos, tamano_muestra)
}
# Acceder a la primera muestra bootstrap
primera_muestra <- muestras_bootstrap[[1]]
# Calcular estadísticas para la primera muestra
estadisticas_muestra <- primera_muestra %>%
summarize(
Media_Edad = mean(Age),
Mediana_Edad = median(Age),
# ... otras estadísticas
)
# Visualizar la primera muestra (ejemplo)
ggplot(primera_muestra, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Pesos en la Primera Muestra Bootstrap", x = "Peso", y = "Frecuencia")
n_muestra <- 100  # Ajusta el tamaño de la muestra según tus necesidades
# Función para generar una muestra bootstrap
generar_muestra_bootstrap <- function(datos, tamano_muestra) {
indices <- sample(1:nrow(datos), size = n_muestra, replace = TRUE)
muestra <- datos[indices, ]
return(muestra)
}
# Parámetros del muestreo bootstrap
n_muestra <- 100  # Ajusta el tamaño de la muestra según tus necesidades
# Función para generar una muestra bootstrap
generar_muestra_bootstrap <- function(datos, tamano_muestra) {
indices <- sample(1:nrow(datos), size = n_muestra, replace = TRUE)
muestra <- datos[indices, ]
return(muestra)
}
# Crear una lista para almacenar las muestras bootstrap
muestras_bootstrap <- list()
# Generar las muestras bootstrap
for (i in 1:numero_de_muestras) {
muestras_bootstrap[[i]] <- generar_muestra_bootstrap(datos, tamano_muestra)
}
# Acceder a la primera muestra bootstrap
primera_muestra <- muestras_bootstrap[[2]]
# Calcular estadísticas para la primera muestra
estadisticas_muestra <- primera_muestra %>%
summarize(
Media_Edad = mean(Age),
Mediana_Edad = median(Age),
# ... otras estadísticas
)
# Visualizar la primera muestra (ejemplo)
ggplot(primera_muestra, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Pesos en la Primera Muestra Bootstrap", x = "Peso", y = "Frecuencia")
knitr::opts_chunk$set(echo = TRUE)
indices <- sample(1:nrow(datos), size = n_muestra, replace = TRUE)
muestra <- datos[indices, ]
return(muestra)
# Función para generar una muestra bootstrap
generar_muestra_bootstrap <- function(datos, tamano_muestra) {
indices <- sample(1:nrow(datos), size = n_muestra, replace = TRUE)
muestra <- datos[indices, ]
return(muestra)
}
# Crear una lista para almacenar las muestras bootstrap
muestras_bootstrap <- list()
# Generar las muestras bootstrap
for (i in 1:numero_de_muestras) {
muestras_bootstrap[[i]] <- generar_muestra_bootstrap(datos, tamano_muestra)
}
# Acceder a la primera muestra bootstrap
primera_muestra <- muestras_bootstrap[[1]]
# Calcular estadísticas para la primera muestra
estadisticas_muestra <- primera_muestra %>%
summarize(
Media_Edad = mean(Age),
Mediana_Edad = median(Age),
# ... otras estadísticas
)
# Visualizar la primera muestra (ejemplo)
ggplot(primera_muestra, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
labs(title = "Histograma de Pesos en la Primera Muestra Bootstrap", x = "Peso", y = "Frecuencia")
# Obtener la columna de interés (por ejemplo, "Gender")
variable_interes <- datos$Gender
# Tamaño de la muestra
tamano_muestra <- 100
# Número de muestras bootstrap
numero_de_muestras <- 1000
# Función para generar una muestra bootstrap
generar_muestra_bootstrap <- function(datos) {
sample(datos, size = tamano_muestra, replace = TRUE)
}
# Generar las muestras bootstrap
muestras_bootstrap <- replicate(numero_de_muestras,
generar_muestra_bootstrap(variable_interes),
simplify = FALSE)
# Calcular la proporción de la categoría de interés (ejemplo: "Male") en cada muestra
proporciones_bootstrap <- sapply(muestras_bootstrap, function(x) {
mean(x == "Male")
})
# Histograma de las proporciones bootstrap
hist(proporciones_bootstrap,
xlab = "Proporción de 'Male' en la muestra",
ylab = "Frecuencia",
main = "Distribución de Proporciones Bootstrap")
# Calcular el intervalo de confianza del 95%
intervalo_confianza <- quantile(proporciones_bootstrap, probs = c(0.025, 0.975))
# Histograma de las proporciones bootstrap
hist(proporciones_bootstrap,
xlab = "Proporción de 'Male' en la muestra",
ylab = "Frecuencia",
main = "Distribución de Proporciones Bootstrap")
